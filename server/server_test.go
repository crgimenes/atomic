package server

import (
	"reflect"
	"testing"

	"github.com/crgimenes/atomic/luaengine"
)

func TestNew(t *testing.T) {
	l := luaengine.New()
	sshServer := New(l)
	type args struct {
		le LuaEngine
	}
	tests := []struct {
		name string
		args args
		want *SSHServer
	}{
		{
			name: "sucess",
			args: args{
				le: l,
			},
			want: sshServer,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := New(tt.args.le); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("New() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_parseDims(t *testing.T) {
	terminfo := []byte("\x00\x00\x00n\x00\x00\x00 \x00\x00\x05\x96\x00\x00\x03`\x00\x00\x01\x00\x81\x00\x00%\x80\x80\x00\x00%\x80\x01\x00\x00\x00\x03\x02\x00\x00\x00\x1c\x03\x00\x00\x00\u007f\x04\x00\x00\x00\x15\x05\x00\x00\x00\x04\x06\x00\x00\x00\xff\a\x00\x00\x00\xff\b\x00\x00\x00\x11\t\x00\x00\x00\x13\n\x00\x00\x00\x1a\v\x00\x00\x00\x19\f\x00\x00\x00\x12\r\x00\x00\x00\x17\x0e\x00\x00\x00\x16\x11\x00\x00\x00\x14\x12\x00\x00\x00\x0f\x1e\x00\x00\x00\x00\x1f\x00\x00\x00\x00 \x00\x00\x00\x00!\x00\x00\x00\x00\"\x00\x00\x00\x00#\x00\x00\x00\x00$\x00\x00\x00\x01&\x00\x00\x00\x01'\x00\x00\x00\x01(\x00\x00\x00\x00)\x00\x00\x00\x01*\x00\x00\x00\x002\x00\x00\x00\x013\x00\x00\x00\x015\x00\x00\x00\x016\x00\x00\x00\x017\x00\x00\x00\x008\x00\x00\x00\x009\x00\x00\x00\x00:\x00\x00\x00\x00;\x00\x00\x00\x01<\x00\x00\x00\x01=\x00\x00\x00\x01>\x00\x00\x00\x00F\x00\x00\x00\x01H\x00\x00\x00\x01I\x00\x00\x00\x00J\x00\x00\x00\x00K\x00\x00\x00\x00Z\x00\x00\x00\x01[\x00\x00\x00\x01\\\x00\x00\x00\x00]\x00\x00\x00\x00\x00")
	type args struct {
		b []byte
	}
	tests := []struct {
		name   string
		args   args
		width  uint32
		height uint32
	}{
		{
			name: "success",
			args: args{
				b: terminfo,
			},
			width:  110,
			height: 32,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			width, height := parseDims(tt.args.b)
			if width != tt.width {
				t.Errorf("parseDims() got width = %v, want %v", width, tt.width)
			}
			if height != tt.height {
				t.Errorf("parseDims() got height = %v, want %v", height, tt.height)
			}
		})
	}
}
